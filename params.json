{"name":"Arduino Makefile","body":"### ABOUT\r\n\r\nI adapted this from the Makefile at\r\n[http://mjo.tc/atelier/2009/02/arduino-cli.html](http://mjo.tc/atelier/2009/02/arduino-cli.html).\r\n\r\nTake a look at `Makefile.serial` and `Makefile.avrispmkii` for example\r\nMakefiles.\r\n\r\nUPDATE: Upgraded to support Arduino 1.0!\r\n\r\n### STANDARD ARDUINO WORKFLOW\r\n\r\nGiven a normal sketch directory, all you need to do is to create\r\na small Makefile which defines a few things, and then includes this one.\r\n\r\nFor example:\r\n\r\n    ARDUINO_DIR  = /Applications/arduino-0013\r\n\r\n    TARGET       = CLItest\r\n    ARDUINO_LIBS = LiquidCrystal\r\n\r\n    MCU          = atmega168\r\n    F_CPU        = 16000000\r\n    ARDUINO_PORT = /dev/cu.usb*\r\n\r\n    include /usr/local/share/Arduino.mk\r\n\r\nHopefully these will be self-explanatory but in case they're not:\r\n\r\n- `ARDUINO_DIR` : Where the Arduino software has been unpacked\r\n- `TARGET` : The basename used for the final files. Canonically\r\n              this would match the .pde file, but it's not needed\r\n              here: you could always set it to xx if you wanted!\r\n- `ARDUINO_LIBS` : A list of any libraries used by the sketch (we assume\r\n              these are in $(ARDUINO_DIR)/libraries\r\n- `MCU` : The target processor\r\n- `F_CPU` : The target processor frequency\r\n- `ARDUINO_PORT` : The port where the Arduino can be found (only needed\r\n              when uploading\r\n\r\nOnce this file has been created the typical workflow is just\r\n\r\n    $ make upload\r\n\r\nAll of the object files are created in the build-cli subdirectory\r\nAll sources should be in the current directory and can include:\r\n - at most one .pde file which will be treated as C++ after the standard\r\n   Arduino header and footer have been affixed.\r\n - any number of .c, .cpp, .s and .h files\r\n\r\n\r\nBesides make upload you can also\r\n\r\n- `make` : no upload\r\n- `make clean` : remove all our dependencies\r\n- `make depends` : update dependencies\r\n- `make reset` : reset the Arduino by tickling DTR on the serial port\r\n- `make raw_upload` : upload without first resetting\r\n\r\n\r\n### ARDUINO WITH OTHER TOOLS\r\n\r\nIf the tools aren't in the Arduino distribution, then you need to \r\nspecify their location:\r\n\r\n    AVR_TOOLS_PATH = /usr/bin\r\n    AVRDUDE_CONF   = /etc/avrdude/avrdude.conf\r\n\r\n\r\n### ARDUINO WITH ISP\r\n\r\nYou need to specify some details of your ISP programmer and might\r\nalso need to specify the fuse values:\r\n\r\n    ISP_PROG\t   = stk500v2\r\n    ISP_PORT     = /dev/ttyACM0\r\n    \r\n    ISP_LOCK_FUSE_PRE  = 0x3f\r\n    ISP_LOCK_FUSE_POST = 0xcf\r\n    ISP_HIGH_FUSE      = 0xdf\r\n    ISP_LOW_FUSE       = 0xff\r\n    ISP_EXT_FUSE       = 0x01\r\n\r\nI think the fuses here are fine for uploading to the ATmega168\r\nwithout bootloader.\r\n\r\nTo actually do this upload use the ispload target:\r\n\r\n    make ispload","tagline":"A simple Makefile for compiling Arduino sketches without the IDE","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}